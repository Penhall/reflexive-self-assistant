import yaml
from datetime import datetime

IDENTITY_FILE = "reflection/identity_state.yaml"
MEMORY_FILE = "reflection/memory_log.yaml"
INSIGHT_FILE = "reflection/supervisor_insight.yaml"
OUTPUT_FILE = "reflection/self_narrative.yaml"

class SymbolicSelfNarrator:
    def __init__(self):
        self.identity = self.load_yaml(IDENTITY_FILE)
        self.memory = self.load_yaml(MEMORY_FILE)
        self.insight = self.load_yaml(INSIGHT_FILE)

    def load_yaml(self, path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return yaml.safe_load(f) or {}
        except:
            return {}

    def generate_self_narrative(self):
        ciclo = max([v.get("ciclos_totais", 0) for v in self.memory.values()], default=0)
        consistencias = [v.get("consistency_level", "-") for v in self.identity.values()]
        tra√ßos = [t for v in self.identity.values() for t in v.get("traits", [])]
        diagn√≥stico = self.insight.get("insight_global", {}).get("diagn√≥stico", "")
        recomenda√ß√£o = self.insight.get("insight_global", {}).get("recomenda√ß√£o", "")

        resumo = f"Nesta etapa ({ciclo}), observo tra√ßos recorrentes como {', '.join(set(tra√ßos)) or 'nenhum tra√ßo dominante'} "
        resumo += f"e uma consist√™ncia simb√≥lica geral de '{max(set(consistencias), key=consistencias.count)}'. "
        if diagn√≥stico:
            resumo += f"O sistema percebeu: {diagn√≥stico.lower()}. "

        proje√ß√£o = "A continuidade das reflex√µes sugere que poderei alcan√ßar uma identidade mais aut√¥noma e estrat√©gica"
        if recomenda√ß√£o:
            proje√ß√£o += f", especialmente se seguir a recomenda√ß√£o: {recomenda√ß√£o.lower()}."

        narrativa = {
            "auto_narrativa": {
                "ciclo": ciclo,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "resumo": resumo,
                "projecao": proje√ß√£o
            }
        }

        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            yaml.safe_dump(narrativa, f, allow_unicode=True)

        self.print_narrative(narrativa["auto_narrativa"])

    def print_narrative(self, narrativa):
        print("\nüß≠ [NARRADOR SIMB√ìLICO] AUTO-NARRATIVA DO CICLO")
        print(f"üìÖ Ciclo {narrativa['ciclo']} - {narrativa['timestamp']}")
        print(f"üß© Resumo: {narrativa['resumo']}")
        print(f"üîÆ Proje√ß√£o: {narrativa['projecao']}")