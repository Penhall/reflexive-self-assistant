#!/usr/bin/env python3
"""
Script simples para testar Neo4j e GraphRAG
"""

import sys
from pathlib import Path

PROJECT_ROOT = Path(__file__).parent.parent
sys.path.append(str(PROJECT_ROOT))

def test_neo4j_basic():
    """Teste b√°sico do Neo4j"""
    print("üß™ Testando conex√£o b√°sica com Neo4j...")
    
    try:
        from neo4j import GraphDatabase
        
        driver = GraphDatabase.driver(
            "bolt://localhost:7687",
            auth=("neo4j", "reflexive123")
        )
        
        with driver.session() as session:
            result = session.run("RETURN 'Hello Neo4j' AS message")
            message = result.single()["message"]
            print(f"‚úÖ Neo4j conectado: {message}")
        
        driver.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o b√°sica: {e}")
        return False

def test_graph_memory():
    """Teste do GraphMemory"""
    print("üß™ Testando GraphMemory...")
    
    try:
        from memory.graph_rag.graph_interface import GraphMemory
        
        graph = GraphMemory()
        
        # Teste b√°sico
        categories = graph.get_categories_and_counts()
        print(f"‚úÖ GraphMemory funcionando")
        print(f"üìä Categorias encontradas: {len(categories)}")
        
        # Teste de inser√ß√£o
        graph.register_pattern(
            "test_reaction", 
            "test_pattern", 
            "test_category", 
            "TestAgent"
        )
        print("‚úÖ Inser√ß√£o de padr√£o funcionando")
        
        graph.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no GraphMemory: {e}")
        return False

def test_hybrid_memory():
    """Teste do HybridMemoryStore"""
    print("üß™ Testando HybridMemoryStore...")
    
    try:
        from memory.hybrid_store import HybridMemoryStore
        
        store = HybridMemoryStore(enable_graphrag=True)
        
        if store.enable_graphrag:
            print("‚úÖ HybridMemoryStore com GraphRAG ativo")
        else:
            print("‚ö†Ô∏è HybridMemoryStore em modo mock")
        
        store.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no HybridMemoryStore: {e}")
        return False

def test_reflection_agent():
    """Teste do ReflectionAgent"""
    print("üß™ Testando ReflectionAgent...")
    
    try:
        from core.agents.reflection_agent import ReflectionAgent
        
        agent = ReflectionAgent()
        
        # Verificar se MD logging est√° desabilitado
        md_logging = getattr(agent, 'enable_md_logging', True)
        
        if md_logging:
            print("‚ö†Ô∏è MD logging ainda habilitado")
            return False
        else:
            print("‚úÖ ReflectionAgent funcionando sem MD logging")
        
        # Verificar GraphRAG
        using_mock = getattr(agent, 'using_mock', True)
        
        if using_mock:
            print("‚ö†Ô∏è ReflectionAgent usando mock (Neo4j n√£o dispon√≠vel)")
        else:
            print("‚úÖ ReflectionAgent usando GraphRAG real")
        
        agent.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no ReflectionAgent: {e}")
        return False

def test_settings():
    """Teste das configura√ß√µes"""
    print("üß™ Testando configura√ß√µes...")
    
    try:
        from config.settings import LEGACY_FEATURES
        
        md_enabled = LEGACY_FEATURES.get('enable_analysis_history_md', True)
        
        if md_enabled:
            print("‚ö†Ô∏è analysis_history.md ainda habilitado nas configura√ß√µes")
            return False
        else:
            print("‚úÖ analysis_history.md desabilitado nas configura√ß√µes")
            return True
        
    except ImportError:
        print("‚ö†Ô∏è Configura√ß√µes n√£o encontradas - usando padr√µes")
        return True
    except Exception as e:
        print(f"‚ùå Erro nas configura√ß√µes: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üî¨ BATERIA DE TESTES - Sistema RSCA")
    print("=" * 50)
    
    tests = [
        ("Configura√ß√µes", test_settings),
        ("Neo4j B√°sico", test_neo4j_basic),
        ("GraphMemory", test_graph_memory),
        ("HybridMemoryStore", test_hybrid_memory),
        ("ReflectionAgent", test_reflection_agent)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\nüìù {test_name}:")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            results[test_name] = False
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES:")
    
    for test_name, passed in results.items():
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"‚Ä¢ {test_name:<20} {status}")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print(f"\nüéØ RESULTADO FINAL: {passed_tests}/{total_tests} testes passaram")
    
    if passed_tests == total_tests:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema funcionando corretamente")
    elif passed_tests >= total_tests - 1:
        print("‚úÖ Sistema funcionando (com pequenos avisos)")
    else:
        print("‚ö†Ô∏è Sistema com problemas - verificar falhas acima")
    
    print("\nüí° PR√ìXIMOS PASSOS:")
    
    if not results.get("Neo4j B√°sico", False):
        print("1. Configure Neo4j: python scripts/setup_neo4j.py")
    
    if not results.get("ReflectionAgent", False):
        print("2. Verifique imports do ReflectionAgent")
    
    if passed_tests >= 3:
        print("3. Execute ciclo de teste: python core/main.py")
        print("4. Monitore dashboard: streamlit run interface/dashboard/streamlit_app.py")
    
    return passed_tests >= 3  # Sucesso se pelo menos 3 testes passaram

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)