#!/usr/bin/env python3
"""
Script para configurar Neo4j automaticamente
Resolve o problema de autentica√ß√£o
"""

import subprocess
import time
import sys
from pathlib import Path

PROJECT_ROOT = Path(__file__).parent.parent

def check_docker():
    """Verifica se Docker est√° instalado e rodando"""
    try:
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Docker instalado")
            return True
        else:
            print("‚ùå Docker n√£o funcionando")
            return False
    except Exception as e:
        print(f"‚ùå Docker n√£o encontrado: {e}")
        return False

def stop_existing_neo4j():
    """Para e remove containers Neo4j existentes"""
    containers = ['neo4j', 'rsca-neo4j']
    
    for container in containers:
        try:
            # Parar container
            subprocess.run(['docker', 'stop', container], 
                          capture_output=True, timeout=10)
            print(f"üõë Container {container} parado")
            
            # Remover container
            subprocess.run(['docker', 'rm', container], 
                          capture_output=True, timeout=10)
            print(f"üóëÔ∏è Container {container} removido")
            
        except:
            pass  # Container pode n√£o existir

def start_neo4j():
    """Inicia Neo4j com configura√ß√µes corretas"""
    print("üöÄ Iniciando Neo4j...")
    
    cmd = [
        'docker', 'run', '-d',
        '--name', 'rsca-neo4j',
        '-p', '7474:7474',
        '-p', '7687:7687',
        '-e', 'NEO4J_AUTH=neo4j/reflexive123',
        '-e', 'NEO4J_PLUGINS=["apoc"]',
        '--restart', 'unless-stopped',
        'neo4j:latest'
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Neo4j iniciado com sucesso")
            print(f"üÜî Container ID: {result.stdout.strip()[:12]}")
            return True
        else:
            print(f"‚ùå Erro ao iniciar Neo4j: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar Docker: {e}")
        return False

def wait_for_neo4j():
    """Aguarda Neo4j ficar dispon√≠vel"""
    print("‚è≥ Aguardando Neo4j ficar dispon√≠vel...")
    
    max_attempts = 12  # 60 segundos
    for attempt in range(max_attempts):
        try:
            # Verificar se container est√° rodando
            result = subprocess.run(['docker', 'logs', 'rsca-neo4j'], 
                                  capture_output=True, text=True, timeout=5)
            
            if 'Started.' in result.stdout:
                print("‚úÖ Neo4j iniciado completamente")
                return True
            elif 'ERROR' in result.stdout:
                print("‚ùå Erro detectado nos logs do Neo4j")
                print(result.stdout[-500:])  # √öltimas 500 chars
                return False
            
            print(f"‚è≥ Tentativa {attempt + 1}/{max_attempts}...")
            time.sleep(5)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar status: {e}")
            time.sleep(5)
    
    print("‚ùå Timeout aguardando Neo4j")
    return False

def test_connection():
    """Testa conex√£o com Neo4j"""
    print("üß™ Testando conex√£o...")
    
    try:
        sys.path.append(str(PROJECT_ROOT))
        from memory.graph_rag.graph_interface import GraphMemory
        
        graph = GraphMemory()
        categories = graph.get_categories_and_counts()
        graph.close()
        
        print("‚úÖ Conex√£o com Neo4j funcionando!")
        print(f"üìä Categorias encontradas: {len(categories)}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def create_env_file():
    """Cria arquivo .env com configura√ß√µes Neo4j"""
    env_file = PROJECT_ROOT / ".env"
    
    env_content = """# Configura√ß√µes do Neo4j para RSCA
NEO4J_URI=bolt://localhost:7687
NEO4J_USERNAME=neo4j
NEO4J_PASSWORD=reflexive123

# Configura√ß√µes Ollama (se necess√°rio)
OLLAMA_HOST=http://localhost:11434

# Configura√ß√µes ChromaDB (se necess√°rio)
CHROMADB_HOST=localhost
CHROMADB_PORT=8000
"""
    
    if env_file.exists():
        print("‚ÑπÔ∏è Arquivo .env j√° existe - n√£o sobrescrevendo")
    else:
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        print(f"‚úÖ Arquivo .env criado: {env_file}")

def show_neo4j_info():
    """Mostra informa√ß√µes sobre o Neo4j"""
    print("\nüìã INFORMA√á√ïES DO NEO4J:")
    print("‚Ä¢ URL Web: http://localhost:7474")
    print("‚Ä¢ Usu√°rio: neo4j")
    print("‚Ä¢ Senha: reflexive123")
    print("‚Ä¢ URI Bolt: bolt://localhost:7687")
    
    print("\nüîß COMANDOS √öTEIS:")
    print("‚Ä¢ Ver logs: docker logs rsca-neo4j")
    print("‚Ä¢ Parar: docker stop rsca-neo4j")
    print("‚Ä¢ Iniciar: docker start rsca-neo4j")
    print("‚Ä¢ Remover: docker rm rsca-neo4j")

def main():
    """Fun√ß√£o principal"""
    print("üê≥ Configurando Neo4j para RSCA")
    print("=" * 40)
    
    # 1. Verificar Docker
    if not check_docker():
        print("‚ùå Instale Docker primeiro: https://docker.com/get-started")
        return False
    
    # 2. Parar Neo4j existente
    stop_existing_neo4j()
    
    # 3. Iniciar novo Neo4j
    if not start_neo4j():
        return False
    
    # 4. Aguardar inicializa√ß√£o
    if not wait_for_neo4j():
        print("‚ö†Ô∏è Neo4j pode n√£o estar totalmente pronto")
        print("üí° Aguarde mais alguns minutos e teste novamente")
    
    # 5. Testar conex√£o
    connection_ok = test_connection()
    
    # 6. Criar arquivo .env
    create_env_file()
    
    # 7. Mostrar informa√ß√µes
    show_neo4j_info()
    
    print("\n" + "=" * 40)
    
    if connection_ok:
        print("‚úÖ NEO4J CONFIGURADO COM SUCESSO!")
        print("\nüéØ Pr√≥ximos passos:")
        print("1. Execute: python core/main.py")
        print("2. Verifique GraphRAG funcionando")
        print("3. Acesse interface web: http://localhost:7474")
    else:
        print("‚ö†Ô∏è NEO4J INICIADO MAS CONEX√ÉO FALHOU")
        print("\nüîß Troubleshooting:")
        print("1. Aguarde 2-3 minutos para inicializa√ß√£o completa")
        print("2. Verifique logs: docker logs rsca-neo4j")
        print("3. Teste conex√£o: python scripts/test_neo4j.py")
    
    return connection_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)