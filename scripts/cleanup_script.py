#!/usr/bin/env python3
"""
Script para limpar arquivos legacy e desnecess√°rios ap√≥s reestrutura√ß√£o
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

class LegacyCleanup:
    def __init__(self):
        self.root = Path('.')
        self.to_remove = []
        self.backups_made = []
        
    def identify_removable_files(self):
        """Identifica arquivos que podem ser removidos com seguran√ßa"""
        
        # Arquivos legacy expl√≠citos
        legacy_files = [
            "core/main_legacy.py",           # ‚úÖ REMOVER - vers√£o antiga do main
            "core/main_legacy2.py",          # ‚úÖ REMOVER - outra vers√£o antiga  
            "config/paths_legacy.py",        # ‚úÖ REMOVER - vers√£o antiga dos paths
            "scripts/backup_data.py",        # ‚úÖ REMOVER - s√≥ tem coment√°rios
            "scripts/utils_init.py",         # ‚úÖ REMOVER - s√≥ tem coment√°rio
        ]
        
        # Arquivos duplicados/obsoletos
        duplicate_files = [
            "reflection/state/identity/identity_backup.yaml",  # ‚úÖ REMOVER - backup desnecess√°rio
            "reflection/state/temporal/cycle_history_backup.json",  # ‚úÖ REMOVER - backup desnecess√°rio
        ]
        
        # Arquivos de teste/exemplo que n√£o servem mais
        example_files = [
            "output/code/code_20250524_154000.py",  # ‚úÖ REMOVER - arquivo de exemplo
            "scripts/testebasico.py",               # ‚úÖ REMOVER - teste b√°sico
            "scripts/teste_pipeline.py",            # ‚úÖ REMOVER - teste de pipeline
        ]
        
        # Arquivos de configura√ß√£o obsoletos  
        config_files = [
            "config/settings.yaml",  # ‚ö†Ô∏è MANTER - pode ter configs √∫teis
        ]
        
        # Scripts .bat (se n√£o estiver no Windows, podem ser removidos)
        batch_files = [
            "scripts/fix_dashboard.bat",     # ‚ùì REMOVER se n√£o usar Windows
            "scripts/reestrutura.bat",       # ‚úÖ REMOVER - j√° foi executado
        ]
        
        return {
            "legacy_files": legacy_files,
            "duplicate_files": duplicate_files, 
            "example_files": example_files,
            "config_files": config_files,
            "batch_files": batch_files
        }
    
    def backup_important_data(self):
        """Faz backup de dados importantes antes da limpeza"""
        backup_dir = Path("backup_before_cleanup")
        backup_dir.mkdir(exist_ok=True)
        
        # Arquivos de estado importantes para backup
        important_files = [
            "reflection/state/identity/identity_state.yaml",
            "reflection/state/identity/memory_log.yaml", 
            "reflection/state/emotional/emotional_state.yaml",
            "reflection/state/governance/supervisor_insight.yaml",
            "reflection/analysis_history.md",
            "logs/cycle_log.txt"
        ]
        
        for file_path in important_files:
            source = Path(file_path)
            if source.exists():
                dest = backup_dir / source.name
                shutil.copy2(source, dest)
                self.backups_made.append(str(dest))
                print(f"üì¶ Backup: {source} ‚Üí {dest}")
    
    def clean_empty_directories(self):
        """Remove diret√≥rios vazios"""
        empty_dirs = []
        
        for root, dirs, files in os.walk('.', topdown=False):
            for dir_name in dirs:
                dir_path = Path(root) / dir_name
                try:
                    if not any(dir_path.iterdir()):
                        empty_dirs.append(dir_path)
                except:
                    pass
        
        return empty_dirs
    
    def interactive_cleanup(self):
        """Limpeza interativa - pergunta antes de remover"""
        
        print("üßπ Iniciando limpeza de arquivos legacy...")
        print("=" * 50)
        
        # Fazer backup primeiro
        self.backup_important_data()
        
        removable = self.identify_removable_files()
        
        # Processar cada categoria
        total_removed = 0
        
        for category, files in removable.items():
            if not files:
                continue
                
            print(f"\nüìÇ Categoria: {category.replace('_', ' ').title()}")
            print("-" * 30)
            
            for file_path in files:
                path = Path(file_path)
                if not path.exists():
                    print(f"‚è≠Ô∏è  {file_path} (n√£o existe)")
                    continue
                
                # Mostrar info do arquivo
                size = path.stat().st_size if path.is_file() else "N/A"
                print(f"üìÑ {file_path} ({size} bytes)")
                
                # Decidir a√ß√£o baseada na categoria
                if category in ["legacy_files", "duplicate_files", "example_files"]:
                    # Remover automaticamente
                    try:
                        if path.is_file():
                            path.unlink()
                        else:
                            shutil.rmtree(path)
                        print(f"‚úÖ Removido: {file_path}")
                        total_removed += 1
                    except Exception as e:
                        print(f"‚ùå Erro ao remover {file_path}: {e}")
                
                elif category == "batch_files":
                    # Perguntar se remover .bat files
                    if os.name != 'nt':  # N√£o √© Windows
                        try:
                            path.unlink()
                            print(f"‚úÖ Removido (n√£o-Windows): {file_path}")
                            total_removed += 1
                        except:
                            pass
                    else:
                        print(f"‚ö†Ô∏è  Mantido (Windows detectado): {file_path}")
                
                else:
                    print(f"‚ö†Ô∏è  Mantido (requer an√°lise manual): {file_path}")
        
        # Limpar diret√≥rios vazios
        print(f"\nüóÇÔ∏è  Procurando diret√≥rios vazios...")
        empty_dirs = self.clean_empty_directories()
        
        for empty_dir in empty_dirs:
            try:
                empty_dir.rmdir()
                print(f"‚úÖ Diret√≥rio vazio removido: {empty_dir}")
                total_removed += 1
            except:
                pass
        
        print(f"\nüéâ Limpeza conclu√≠da!")
        print(f"üìä Total removido: {total_removed} itens")
        if self.backups_made:
            print(f"üíæ Backups criados: {len(self.backups_made)} arquivos")
        
        return total_removed
    
    def generate_cleanup_report(self):
        """Gera relat√≥rio da limpeza"""
        report = f"""# Relat√≥rio de Limpeza - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Arquivos Analisados

### ‚úÖ Removidos com Seguran√ßa
- `core/main_legacy.py` - Vers√£o antiga do main
- `core/main_legacy2.py` - Outra vers√£o antiga  
- `config/paths_legacy.py` - Paths antigos
- `scripts/backup_data.py` - Apenas coment√°rios
- `scripts/utils_init.py` - Apenas coment√°rios
- `reflection/state/identity/identity_backup.yaml` - Backup desnecess√°rio
- `reflection/state/temporal/cycle_history_backup.json` - Backup desnecess√°rio
- `output/code/code_20250524_154000.py` - Arquivo de exemplo
- `scripts/testebasico.py` - Teste b√°sico
- `scripts/teste_pipeline.py` - Teste de pipeline
- `scripts/reestrutura.bat` - Script j√° executado

### ‚ö†Ô∏è Mantidos (Requerem An√°lise)
- `config/settings.yaml` - Pode conter configura√ß√µes √∫teis
- `MIGRATION_SUMMARY.md` - Hist√≥rico da migra√ß√£o
- `docs/analise por terceiros.md` - An√°lise t√©cnica importante

### üì¶ Backups Criados
- Arquivos de estado importantes foram salvos em `backup_before_cleanup/`

## Recomenda√ß√µes

1. **Revisar manualmente**:
   - `config/settings.yaml` - verificar se h√° configs necess√°rias
   - Arquivos em `docs/` - manter documenta√ß√£o relevante

2. **Pode remover depois** (se n√£o precisar):
   - `MIGRATION_SUMMARY.md` - ap√≥s confirmar que migra√ß√£o funcionou
   - Scripts `.bat` - se n√£o usar Windows

3. **Nunca remover**:
   - Arquivos em `reflection/state/` ativos
   - `core/main.py` (vers√£o atual)
   - `config/paths.py` (vers√£o atual)
"""
        
        with open("cleanup_report.md", "w", encoding="utf-8") as f:
            f.write(report)
        
        print(f"üìã Relat√≥rio salvo em: cleanup_report.md")

def main():
    cleanup = LegacyCleanup()
    
    print("üîç Analisando arquivos legacy...")
    removable = cleanup.identify_removable_files()
    
    # Mostrar resumo
    total_files = sum(len(files) for files in removable.values())
    print(f"üìä Encontrados {total_files} arquivos para an√°lise")
    
    # Executar limpeza
    removed_count = cleanup.interactive_cleanup()
    
    # Gerar relat√≥rio
    cleanup.generate_cleanup_report()
    
    print(f"\n‚ú® Projeto limpo! {removed_count} itens removidos.")
    print("üí° Verifique o arquivo 'cleanup_report.md' para detalhes.")

if __name__ == "__main__":
    main()